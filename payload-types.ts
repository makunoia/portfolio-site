/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    projects: Project;
    'gallery-items': GalleryItem;
    pages: Page;
    'project-tags': ProjectTag;
    'my-roles': MyRole;
    'journal-entries': JournalEntry;
    'journal-entry-tags': JournalEntryTag;
    assets: Asset;
    globals: Global;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    'gallery-items': GalleryItemsSelect<false> | GalleryItemsSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'project-tags': ProjectTagsSelect<false> | ProjectTagsSelect<true>;
    'my-roles': MyRolesSelect<false> | MyRolesSelect<true>;
    'journal-entries': JournalEntriesSelect<false> | JournalEntriesSelect<true>;
    'journal-entry-tags': JournalEntryTagsSelect<false> | JournalEntryTagsSelect<true>;
    assets: AssetsSelect<false> | AssetsSelect<true>;
    globals: GlobalsSelect<false> | GlobalsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  title: string;
  type: string;
  year: string;
  /**
   * Appears on the project page hero section and the front page if featured
   */
  desc: string;
  slug: string;
  status: 'ONGOING' | 'DONE' | 'SUNSET';
  yearDone?: string | null;
  role: string | MyRole;
  tag: string | ProjectTag;
  sections?:
    | {
        title: string;
        htmlID: string;
        blocks?:
          | {
              lead: string;
              copy: string;
              htmlID: string;
              showcase?: Showcase[] | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Users won't be able to access this project unless they provide a password
   */
  isLocked?: boolean | null;
  /**
   * Provide a codename and a password for this locked project
   */
  lockedData?: {
    codename: string;
  };
  /**
   * Add this project to the Featured Projects carousel displayed on the homepage
   */
  isFeatured?: boolean | null;
  featuredData?: {
    image: string | Asset;
    /**
     * Enter a valid HEX code
     */
    gradientStart: string;
    /**
     * Enter a valid HEX code
     */
    gradientEnd: string;
  };
  /**
   * Archived projects adds a section on the project page
   */
  isArchived?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "my-roles".
 */
export interface MyRole {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "project-tags".
 */
export interface ProjectTag {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Showcase".
 */
export interface Showcase {
  /**
   * Add a before and after image of the showcase
   */
  isRevealer?: boolean | null;
  image?: (string | null) | Asset;
  images?: {
    beforeImage: string | Asset;
    afterImage: string | Asset;
  };
  title: string;
  desc?: string | null;
  /**
   * A small badge at the opposite end of the title
   */
  tag?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'showcase';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assets".
 */
export interface Asset {
  id: string;
  name?: string | null;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery-items".
 */
export interface GalleryItem {
  id: string;
  title: string;
  category: 'photo' | 'video';
  description?: string | null;
  /**
   * Optional: Guides how this asset should occupy the grid layout.
   */
  renderHint?: ('auto' | 'square' | 'landscape' | 'portrait_4_5' | 'portrait_9_16') | null;
  /**
   * Optional external link to display when no file is uploaded or to link out.
   */
  externalUrl?: string | null;
  dateTaken?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  name: 'Home' | 'Projects' | 'Gallery' | 'Journal' | 'About Me';
  intro?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Your status will be displayed as a badge on the home page hero section
   */
  status?: ('employed' | 'open') | null;
  pagePhotos?: {
    portrait: string | Asset;
    cover: string | Asset;
  };
  sections?:
    | {
        title: string;
        layout: 'stack' | 'two-col';
        content: (InfoItem | BooleanItem | MediaItem)[];
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InfoItem".
 */
export interface InfoItem {
  label: string;
  desc: string;
  tag?: string | null;
  image?: (string | null) | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'info-item';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BooleanItem".
 */
export interface BooleanItem {
  label: string;
  value: boolean;
  id?: string | null;
  blockName?: string | null;
  blockType: 'boolean-item';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaItem".
 */
export interface MediaItem {
  label: string;
  genre: string;
  tag?: string | null;
  poster?: (string | null) | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'media-item';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "journal-entries".
 */
export interface JournalEntry {
  id: string;
  title: string;
  type: string;
  slug: string;
  date: string;
  tag: string | JournalEntryTag;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "journal-entry-tags".
 */
export interface JournalEntryTag {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globals".
 */
export interface Global {
  id: string;
  name: 'resume' | 'lockedProjectPassword';
  type: 'Text' | 'File';
  value?: string | null;
  document?: (string | null) | Asset;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'projects';
        value: string | Project;
      } | null)
    | ({
        relationTo: 'gallery-items';
        value: string | GalleryItem;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'project-tags';
        value: string | ProjectTag;
      } | null)
    | ({
        relationTo: 'my-roles';
        value: string | MyRole;
      } | null)
    | ({
        relationTo: 'journal-entries';
        value: string | JournalEntry;
      } | null)
    | ({
        relationTo: 'journal-entry-tags';
        value: string | JournalEntryTag;
      } | null)
    | ({
        relationTo: 'assets';
        value: string | Asset;
      } | null)
    | ({
        relationTo: 'globals';
        value: string | Global;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  title?: T;
  type?: T;
  year?: T;
  desc?: T;
  slug?: T;
  status?: T;
  yearDone?: T;
  role?: T;
  tag?: T;
  sections?:
    | T
    | {
        title?: T;
        htmlID?: T;
        blocks?:
          | T
          | {
              lead?: T;
              copy?: T;
              htmlID?: T;
              showcase?:
                | T
                | {
                    showcase?: T | ShowcaseSelect<T>;
                  };
              id?: T;
            };
        id?: T;
      };
  isLocked?: T;
  lockedData?:
    | T
    | {
        codename?: T;
      };
  isFeatured?: T;
  featuredData?:
    | T
    | {
        image?: T;
        gradientStart?: T;
        gradientEnd?: T;
      };
  isArchived?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Showcase_select".
 */
export interface ShowcaseSelect<T extends boolean = true> {
  isRevealer?: T;
  image?: T;
  images?:
    | T
    | {
        beforeImage?: T;
        afterImage?: T;
      };
  title?: T;
  desc?: T;
  tag?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery-items_select".
 */
export interface GalleryItemsSelect<T extends boolean = true> {
  title?: T;
  category?: T;
  description?: T;
  renderHint?: T;
  externalUrl?: T;
  dateTaken?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  name?: T;
  intro?: T;
  status?: T;
  pagePhotos?:
    | T
    | {
        portrait?: T;
        cover?: T;
      };
  sections?:
    | T
    | {
        title?: T;
        layout?: T;
        content?:
          | T
          | {
              'info-item'?: T | InfoItemSelect<T>;
              'T-item'?: T | BooleanItemSelect<T>;
              'media-item'?: T | MediaItemSelect<T>;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InfoItem_select".
 */
export interface InfoItemSelect<T extends boolean = true> {
  label?: T;
  desc?: T;
  tag?: T;
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BooleanItem_select".
 */
export interface BooleanItemSelect<T extends boolean = true> {
  label?: T;
  value?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaItem_select".
 */
export interface MediaItemSelect<T extends boolean = true> {
  label?: T;
  genre?: T;
  tag?: T;
  poster?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "project-tags_select".
 */
export interface ProjectTagsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "my-roles_select".
 */
export interface MyRolesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "journal-entries_select".
 */
export interface JournalEntriesSelect<T extends boolean = true> {
  title?: T;
  type?: T;
  slug?: T;
  date?: T;
  tag?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "journal-entry-tags_select".
 */
export interface JournalEntryTagsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assets_select".
 */
export interface AssetsSelect<T extends boolean = true> {
  name?: T;
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globals_select".
 */
export interface GlobalsSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  value?: T;
  document?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EntrySection".
 */
export interface EntrySection {
  lead: string;
  content: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'entry-section';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}